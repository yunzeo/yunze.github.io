#v0.50.0
# [common] is integral section
[common] is integral section
# IPv6 的字面地址或主机名必须用方括号括起来。
# 必须用方括号括起来，如"[::1]:80"、"[ipv6-host]:http "或"[ipv6-host%zone]:80"。
# 对于单个 "server_addr "字段，无需方括号，如 "server_addr = ::" 。
server_addr = 0.0.0.0
server_port = 7000

# STUN 服务器帮助穿透 NAT 漏洞。
# nat_hole_stun_server = stun.easyvoip.com:3478

# 拨号服务器等待连接完成的最长时间。默认值为 10 秒。
# dial_server_timeout = 10

# dial_server_keepalive 指定 frpc 和 frps 之间活动网络连接的 keep-alive 探测间隔。
# 如果为负数，则禁用 keep-alive 探测。
# dial_server_keepalive = 7200

# 如果想通过 http 代理、socks5 代理或 ntlm 代理连接 frps，可在此处或全局环境变量中设置 http_proxy。
# 只有当协议为 tcp 时才有效
# http_proxy = http://user:passwd@192.168.1.128:8080
# http_proxy = socks5://user:passwd@192.168.1.128:1080
# http_proxy = ntlm://user:passwd@192.168.1.128:2080

# 控制台或真实日志文件路径，如 ./frpc.log
log_file = ./frpc.log

# 跟踪、调试、信息、警告、错误
log_level = info

log_max_days = 3

# 当 log_file 为控制台时禁用日志颜色，默认为 false
disable_log_color = false

# 用于身份验证，应与 frps.ini 相同
# authenticate_heartbeats 指定是否在发送到 frps 的心跳中包含身份验证令牌。默认情况下，该值为 false。
authenticate_heartbeats = false

# authenticate_new_work_conns 指定是否在发送给 frps 的新工作连接中包含身份验证标记。默认情况下，此值为 false。
authenticate_new_work_conns = false

# 验证令牌
token = 12345678

authentication_method = 

# if AuthenticationMethod == "oidc"。
# 默认情况下，该值为""。
oidc_client_id =

# 如果 AuthenticationMethod == "oidc"，则 oidc_client_secret 指定在 OIDC 身份验证中用于获取令牌的客户机秘密。
# 默认情况下，此值为""。
oidc_client_secret =

如果 AuthenticationMethod == "oidc"，则 # oidc_audience 指定令牌在 OIDC 身份验证中的受众。默认情况下，该值为""。
oidc_audience =

# 如果 AuthenticationMethod =="oidc", 则 oidc_scope 指定令牌在 OIDC 身份验证中的权限。默认情况下，该值为""。
oidc_scope =

# oidc_token_endpoint_url 指定实现 OIDC 令牌端点的 URL。
# 如果 AuthenticationMethod == "oidc"，它将用于获取 OIDC 令牌。默认情况下，该值为""。
oidc_token_endpoint_url =

# oidc_additional_xxx 指定要发送到 OIDC 令牌端点的附加参数。
# 例如，如果要指定 "观众 "参数，可以设置如下。
# frp 将在附加参数中添加 "audience=<value>" "var1=<value>" 。
# oidc_additional_audience = https://dev.auth.com/api/v2/
# oidc_additional_var1 = foobar

# 设置管理员地址，以便通过 http api 控制 frpc 的操作，如重新加载
admin_addr = 127.0.0.1
admin_port = 7400
admin_user = admin
admin_pwd = admin
# 管理资产目录。默认情况下，这些资产与 frpc 绑定。
# assets_dir = ./static

# 连接将提前建立，默认值为零
pool_count = 5

# 是否使用 tcp 流多路复用，默认值为 true，必须与 frps 相同
# tcp_mux = true

# 指定 tcp 多路复用的保持存活时间间隔。
# 仅在 tcp_mux 为 true 时有效。
# tcp_mux_keepalive_interval = 60

# 您的代理名称将更改为 {user}.{proxy}
user = your_name

# 决定是否在首次登录失败时退出程序，否则继续重新登录 frps
# 默认为 true
login_fail_exit = true

# 用于连接服务器的通信协议
# 现在支持 tcp、kcp、quic 和 websocket，默认为 tcp
protocol = tcp

# 连接服务器时设置客户端绑定 IP，默认为空。
# 只有当协议 = tcp 或 websocket 时，才会使用该值。
connect_server_local_ip = 0.0.0.0

# quic 协议选项
# quic_keepalive_period = 10
# quic_max_idle_timeout = 30
# quic_max_incoming_streams = 100000

# 如果 tls_enable 为 true，frpc 将通过 tls 连接 frps。
# 自 v0.50.0 版起，默认值改为 true，默认启用 tls。
tls_enable = true

# tls_cert_file = client.crt
# tls_key_file = client.key
# tls_trusted_ca_file = ca.crt
# tls_server_name = example.com

# 指定一个 dns 服务器，这样 frpc 就会使用该服务器而不是默认服务器
# dns_server = 8.8.8.8

# 以", "分隔的代理名称
# 默认为空，表示所有代理
# start = ssh,dns

# 心跳配置，不建议修改默认值
# heartbeat_interval 的默认值是 10，heartbeat_timeout 的默认值是 90。设置负值
# 以禁用它。
# heartbeat_interval = 30
# 心跳超时 = 90

# 客户端的附加元信息
meta_var1 = 123
meta_var2 = 234

# 指定 udp 数据包大小，单位为字节。如果未设置，默认值为 1500。
# 该参数在客户端和服务器端应相同。
# 它会影响 udp 和 sudp 代理。
udp_packet_size = 1500

# 包括其他代理配置文件。
# includes = ./confd/*.ini

# 如果 disable_custom_tls_first_byte 设置为 false，则 frpc 将在启用 tls 时使用第一个自定义字节与 frps 建立连接。
启用 tls 时，frpc 将使用 # 第一个自定义字节与 frps 建立连接。
# 自 v0.50.0 版起，默认值已改为 true，并且默认禁用第一个自定义字节。
disable_custom_tls_first_byte = true

# 在管理员监听器中启用 golang pprof 处理程序。
# 必须先设置管理端口。
pprof_enable = false

# ssh' 是唯一的代理名称
# 如果 [common] 部分中的用户名不是空的，则会更改为 {user}.{proxy}，如 'your_name.ssh'
[ssh］
# tcp | udp | http | https | stcp | xtcp，默认为 tcp
type = tcp
local_ip = 127.0.0.1
local_ip = 22
# 限制该代理的带宽，单位为 KB 和 MB
bandwidth_limit = 1MB
# 限制带宽的位置，可以是 "客户端 "或 "服务器"，默认为 "客户端
bandwidth_limit_mode = 客户端
# true 或 false，如果为 true，frps 和 frpc 之间的信息将被加密，默认为 false
use_encryption = false
# 如果为 true，信息将被压缩
use_compression = false
# frps 监听的远程端口
remote_port = 6001
# frps 将对同一组代理的连接进行负载平衡
group = test_group
# 组应具有相同的组密钥
group_key = 123456
# 启用后端服务的健康检查，它现在支持 "tcp "和 "http
# frpc 将连接本地服务端口，检测其健康状态
health_check_type = tcp
# 健康检查连接超时
health_check_timeout_s = 3
# 如果连续失败 3 次，代理将从 frps 中移除
health_check_max_failed = 3
# 每 10 秒进行一次健康检查
health_check_interval_s = 10
# 每个代理的附加元信息
meta_var1 = 123
meta_var2 = 234

[ssh_random］
type = tcp
local_ip = 127.0.0.1
local_port = 22
# 如果 remote_port 为 0，frps 将为您分配一个随机端口
remote_port = 0

# 如果要暴露多个端口，请在部分名称前添加 "range: "前缀
# frpc 将生成多个代理，如 "tcp_port_6010"、"tcp_port_6011 "等。
[range:tcp_port］
type = tcp
local_ip = 127.0.0.1
local_port = 6010-6020,6022,6024-6028
remote_port = 6010-6020,6022,6024-6028
use_encryption = false
use_compression = false

[dns］
type = udp
local_ip = 114.114.114.114
local_port = 53
remote_port = 6002
use_encryption = false
use_compression = false

[range:udp_port］
type = udp
local_ip = 114.114.114.114
local_port = 53
remote_port = 6002
use_encryption = false
use_compression = false

# 将域名解析到 [server_addr]，以便使用 http://web01.yourdomain.com 浏览 web01，使用 http://web02.yourdomain.com 浏览 web02
[web01］
type = http
local_ip = 127.0.0.1
local_port = 80
use_encryption = false
use_compression = true
# http 用户名和密码是 http 协议的安全认证
# 如果未设置，则无需认证即可访问此自定义域
http_user = admin
http_pwd = admin
# 如果 frps 的域名是 frps.com，则可以通过 URL http://web01.frps.com 访问 [web01] 代理
subdomain = web01
custom_domains = web01.yourdomain.com
# locations 仅适用于 http 类型
locations = /,/pic
# 如果 http 基本自动用户为 abc，则将请求路由至此服务
# route_by_http_user = abc
host_header_rewrite = example.com
# 前缀为 "header_"的参数将用于更新 http 请求头
header_X-From-Where = frp
health_check_type = http
# frpc 将向本地 http 服务发送 GET http 请求"/status
# 当 http 服务返回 2xx http 响应代码时，它是有效的
health_check_url = /status
health_check_interval_s = 10
health_check_max_failed = 3
health_check_timeout_s = 3

[web02]
type = https
local_ip = 127.0.0.1
local_port = 8000
use_encryption = false
use_compression = false
subdomain = web02
custom_domains = web02.yourdomain.com
# 如果不为空，frpc 将使用代理协议向本地服务传输连接信息
# v1 或 v2 或为空
proxy_protocol_version = v2

[plugin_unix_domain_socket]（unix 域名套接字插件
type = tcp
remote_port = 6003
# 如果定义了插件，则 local_ip 和 local_port 无用
# 插件将处理来自 frps 的连接
plugin = unix_domain_socket
# 插件需要的前缀为 "plugin_"的参数
plugin_unix_path = /var/run/docker.sock

[plugin_unix_path = /var/run/docker.sock］
type = tcp
remote_port = 6004
plugin = http_proxy
plugin_http_user = abc
plugin_http_passwd = abc

[plugin_socks5]
type = tcp
remote_port = 6005
plugin = socks5
plugin_user = abc
plugin_passwd = abc

[plugin_static_file]
type = tcp
remote_port = 6006
plugin = static_file
plugin_local_path = /var/www/blog
plugin_strip_prefix = static
plugin_http_user = abc
plugin_http_passwd = abc

[plugin_https2http]
type = https
custom_domains = test.yourdomain.com
plugin = https2http
plugin_local_addr = 127.0.0.1:80
plugin_crt_path = ./server.crt
plugin_key_path = ./server.key
plugin_host_header_rewrite = 127.0.0.1
plugin_header_X-From-Where = frp

[plugin_https2https]
type = https
custom_domains = test.yourdomain.com
plugin = https2https
plugin_local_addr = 127.0.0.1:443
plugin_crt_path = ./server.crt
plugin_key_path = ./server.key
plugin_host_header_rewrite = 127.0.0.1
plugin_header_X-From-Where = frp

[plugin_http2https]
type = http
custom_domains = test.yourdomain.com
plugin = http2https
plugin_local_addr = 127.0.0.1:443
plugin_host_header_rewrite = 127.0.0.1
plugin_header_X-From-Where = frp

[secret_tcp］
# 如果类型是秘密 tcp，则远程端口无用
# 要连接本地端口的用户应部署另一个带有 stcp 代理的 frpc，其角色为访问者
type = stcp
# sk 用于游客身份验证
sk = abcdefg
local_ip = 127.0.0.1
local_port = 22
use_encryption = false
use_compression = false
# 如果不为空，则只有指定用户的访问者才能连接。
# 否则，同一用户的访问者也可以连接。*"表示允许所有用户。
allow_users = *

# frpc 的用户在 stcp 服务器和 stcp 访问者中都应相同
[secret_tcp_visitor] 
# frpc 角色访问者 -> frps -> frpc 角色服务器
role = visitor
type = stcp
# 要访问的服务器名称
server_name = secret_tcp
sk = abcdefg
# 将此地址连接到访问者的 stcp 服务器
bind_addr = 127.0.0.1
# bind_port 可以小于 0，这意味着不绑定端口，只接收从
# 其他访问者重定向的连接。(现在 SUDP 不支持此功能）
bind_port = 9000
use_encryption = false
use_compression = false

[p2p_tcp]
type = xtcp
sk = abcdefg
local_ip = 127.0.0.1
local_port = 22
use_encryption = false
use_compression = false
# 如果不为空，则只有指定用户的访问者才能连接。
# 否则，同一用户的访问者也可以连接。*"表示允许所有用户。
allow_users = user1, user2

[p2p_tcp_visitor]
role = visitor
type = xtcp
# 如果未设置服务器用户，则默认为当前用户
server_user = user1
server_name = p2p_tcp
sk = abcdefg
bind_addr = 127.0.0.1
# bind_port 可以小于 0，这表示不绑定端口，只接收从
# 其他访问者的连接。(现在 SUDP 不支持此功能）
bind_port = 9001
use_encryption = false
use_compression = false
# 需要自动保持隧道状态时，将其设置为 true
keep_tunnel_open = false
# 当 keep_tunnel_open 设为 true 时有效，每小时尝试打通的次数
max_retries_an_hour = 8
min_retry_interval = 90
# fallback_to = stcp_visitor
# fallback_timeout_ms = 500

[tcpmuxhttpconnect]
type = tcpmux
multiplexer = httpconnect
local_ip = 127.0.0.1
local_port = 10701
custom_domains = tunnel1
# route_by_http_user = user1
